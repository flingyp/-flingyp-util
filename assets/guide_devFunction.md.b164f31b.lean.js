import{d as a,o as s,c as o,F as i,k as d,u,g as e,t as _,_ as h,b as g,h as n,a as y}from"./app.4bb9f0d6.js";const m=JSON.parse('[{"text":"Common","link":"/Common/useCommonType/"},{"text":"Date","link":"/Date/useFormatDate/"},{"text":"Dom","link":"/Dom/useCopySelector/"},{"text":"Number","link":"/Number/useRandomInteger/"},{"text":"Object","link":"/Object/useObjectIsEmpty/"},{"text":"Regexp","link":"/Regexp/useCheckPhoneNumber/"},{"text":"String","link":"/String/useCheckIncludeEmoji/"},{"text":"Node","link":"/Node/useGetCurrentPath"}]'),F={id:"modules-show-container"},f=["href"],v=a({__name:"DevFunctionModulesShow",setup(l){return(c,p)=>(s(),o("div",F,[(s(!0),o(i,null,d(u(m),(t,r)=>(s(),o("div",{key:r},[e("a",{href:`/flypeng-tool${t.link}`},"- "+_(t.text)+" Functions 模块",9,f)]))),128))]))}});const x=h(v,[["__scopeId","data-v-fed0a6db"]]),k=e("h1",{id:"dev-function",tabindex:"-1"},[n("Dev Function "),e("a",{class:"header-anchor",href:"#dev-function","aria-hidden":"true"},"#")],-1),D=e("h2",{id:"introduce",tabindex:"-1"},[n("Introduce "),e("a",{class:"header-anchor",href:"#introduce","aria-hidden":"true"},"#")],-1),b=e("p",null,[n("当你准备向 "),e("strong",null,"@flypeng/tool"),n(" 新增新 Function 时，根据新 Function 的特性来决定放置在哪个模块。")],-1),C=e("p",null,[n("目前 "),e("strong",null,"@flypeng/tool"),n(" 已经存在如下模块：")],-1),N=y(`<p>项目的根目录下存在 <strong>template</strong> 目录，里面有 <strong>Docs Template</strong>、<strong>Function Template</strong></p><p>添加新 Function 时，请参考已存在的 Function 来进行添加</p><h2 id="attention" tabindex="-1">Attention <a class="header-anchor" href="#attention" aria-hidden="true">#</a></h2><ol><li><p>函数命名统一： <code>useAaBb</code></p></li><li><p>函数统一被默认导出</p></li><li><p>函数命名时要确保名称唯一，不可重复</p></li></ol><p>此处做法的好处就是：开发者在使用工具库时，在输入 <code>use</code> 时 会列出所有的函数名称，会提供极好的类型提示</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { useAaBb } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;@flypeng/tool&#39;</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> { useAaBb } </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;@flypeng/tool&#39;</span></span>
<span class="line"></span></code></pre></div><ol start="4"><li>文档中所出现的如下代码。均可在 <code>@flypeng/tool</code> 包中引入，这样做分包的目的是因为 <strong>Vitepress</strong> 中如果导入了 Node 模块在开发和构建当中都会出现一些奇怪的错误。而分包后，在开发阶段我们只在文档中引入 <code>@flypeng/browser</code>，而 <code>@flypeng/node</code> 模块则另外开了一个 <strong>playground</strong> 来测试相关钩子函数</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> { xxx } </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;@flypeng/browser&#39;</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">import</span><span style="color:#24292F;"> { xxx } </span><span style="color:#CF222E;">from</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&#39;@flypeng/browser&#39;</span></span>
<span class="line"></span></code></pre></div>`,8),A=JSON.parse('{"title":"Dev Function","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduce","slug":"introduce","link":"#introduce","children":[]},{"level":2,"title":"Attention","slug":"attention","link":"#attention","children":[]}],"relativePath":"guide/devFunction.md"}'),B={name:"guide/devFunction.md"},w=a({...B,setup(l){return(c,p)=>(s(),o("div",null,[k,D,b,C,g(x),N]))}});export{A as __pageData,w as default};
